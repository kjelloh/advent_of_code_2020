//  Watch live coding this solution at Youtube https://youtu.be/IHpz-cGqV8I
//  main.cpp
//  AdventOfCode201218_2
//
//  Created by Kjell-Olov HÃ¶gdal on 2020-12-18.
//

#include <iostream>
#include <vector>
#include <sstream>
#include <variant>

extern char const* pExamples[];
extern char const* pExpressions;

using Number = std::uint64_t;
using OpOrGroup = char;
using EvaluationStack = std::vector<std::variant<OpOrGroup,Number>>;

Number read_number(char in_c,std::basic_istringstream<char>& expression_stream) {
    Number result {static_cast<Number>(in_c-0x30)};
    char c;
    while (std::isalnum(expression_stream.peek())) {
        expression_stream >> c;
        result += 10*result + (c - 0x30);
    }
    return result;
}

Number pop_number(EvaluationStack& stack) {
    Number result {std::get<Number>(stack.back())};
    stack.pop_back();
    return result;
}

OpOrGroup pop_op(EvaluationStack& stack) {
    OpOrGroup result {std::get<OpOrGroup>(stack.back())};
    stack.pop_back();
    return result;
}

bool peek_start_group(EvaluationStack& stack) {
    bool result {false};
    if (std::holds_alternative<OpOrGroup>(stack.back())) {
        result = std::get<OpOrGroup>(stack.back()) == '(';
    }
    return result;
}

bool peek_op(EvaluationStack& stack) {
    bool result {false};
    if (std::holds_alternative<OpOrGroup>(stack.back())) {
        auto op = std::get<OpOrGroup>(stack.back());
        result = ((op == '*') or (op == '+'));
    }
    return result;
}

Number evaluate_stack(EvaluationStack& stack) {
    Number result {0};
    Number n2 = pop_number(stack);
    if (stack.size()==0 or peek_start_group(stack)) {
        result = n2;
    }
    else {
        auto op = pop_op(stack);
        Number n1 = pop_number(stack);
        switch (op) {
            case '+': {result = n1+n2;} break;
            case '*': {result = n1*n2;} break;
        }

    }
    if ((stack.size() > 1) and (peek_start_group(stack) == false)) {
        stack.push_back(result);
        result = evaluate_stack(stack);
    }
    std::cout << "\n\t" << result;
    return result;
}

Number evaluate(char const* sExpression) {
    EvaluationStack stack {};
    std::basic_istringstream<char> expression_stream {sExpression};
    char c;
    std::string sTerm {};
    while (expression_stream >> c) {
        if (std::isalnum(c)) {
            auto number = read_number(c,expression_stream);
            stack.push_back(number);
        }
        else {
            // +,*,(,)
            switch (c) {
                case '+': {
                    // +, ) and end has higher precedence
                    stack.push_back(c);
                } break;
                case '*': {
                    auto number = evaluate_stack(stack);
                    stack.push_back(number);
                    stack.push_back(c);
                } break;
                case '(': {
                    stack.push_back(c);
                } break;
                case ')': {
                    auto number = evaluate_stack(stack);
                    stack.pop_back(); // (
                    stack.push_back(number);
                } break;
            }
        }
    }
    return evaluate_stack(stack);
}

int main(int argc, const char * argv[]) {
    
    // Test
    if (false) {
        std::vector<Number> expected {231,51,46,1445,669060,23340};
        for (int i = 0; i < 6; i++) {
            std::cout << "\n\nexpresion : " << pExamples[i];
            auto result = evaluate(pExamples[i]);
            std::cout << "\n\t-------\n\t = " << result;
            if (result == expected[i]) {
                std::cout << " PASSED :)";
            }
            else {
                std::cout << " FAILED 8-|";
            }
        }
    }
    
    // Part 1
    if (true) {
        std::basic_istringstream<char> in {pExpressions};
        std::string sExpression {};
        Number result {0};
        while (std::getline(in, sExpression)) {
            result += evaluate(sExpression.c_str());
        }
        std::cout << "\n\nDay 18 Part 2 answer = " << result;
    }
        
    std::cout << "\n\n";
    return 0;
}

char const* pExamples[] {
    // = 71
    R"(1 + 2 * 3 + 4 * 5 + 6)"
    // = 51
    ,R"(1 + (2 * 3) + (4 * (5 + 6)))"
    // = 26
    ,R"(2 * 3 + (4 * 5))"
    // becomes 437.
    ,R"(5 + (8 * 3 + 9 + 3 * 4 * 3))"
    // becomes 12240.
    ,R"(5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4)))"
    // becomes 13632.
    ,R"(((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2)"
};

char const* pExpressions = R"((5 * (5 * 7 * 6 * 7 + 2) * 5 + 7) + 3 * 2 * 8 + 8
8 * 6 + (5 * (3 + 2 * 8 + 2 + 7 + 4) + (7 + 5 * 6) * 9)
(6 + (2 * 3)) + (3 * (8 * 6) + 4 * 5 + 9) + (7 * 8 * 2 + (2 * 3 * 6 + 2) * 4) * 7 + 8 * 4
5 * (2 * (7 + 9) * 5) + 5 + 6 * 7
7 + (4 * 2 + 5) + 6
9 + (7 * (4 + 7) + 4 * 9) + 3 + 9 * 5
(9 + 8) * 9 + ((9 * 3 * 7 + 9 + 5) * 2 * 7 * 7) + 3 * 5
5 * (8 * (2 + 6) * 5 * 8) + 4
(2 + 9 + 9 + 8 * 6 * 7) + 9 + 7 + 6
((9 + 3 * 7) + 4 + 6 * 6 * 4 + (8 * 7 * 5 + 9)) * 8 + 7 + 4 + (7 + 7) * 3
(2 * 5) * 2 * (4 + 7 + 2) + 7
((8 + 2) * 2 + 5 * (3 + 6 * 6) * 2 * (6 + 9 + 9 * 7)) + 5 + (2 + 8) * (9 + 6 + 5 + (5 * 5 + 7 * 7 + 7) * 9)
5 * (2 + 5 + 8 + 3 + 3) * (6 * 3 * 6 * 2 * 7) + 7
(6 + (9 + 8 * 5 * 8)) * 8 + 7 * 4
(3 + 4 * 8 + 7 * 9 * 2) * 2 + (3 * (4 * 6 * 4 * 9))
(3 * 4) * 7 * (5 + 4 * 9) * ((4 * 7 + 2) + 9 + 7 * 7 + (3 + 5 * 3 + 7) * 5) + 7 * (7 * 7 + 6 + 5 * (4 * 7 * 6 + 4 + 2) * 7)
(2 * (5 * 5 + 2 * 3 * 4 * 5) + (9 * 9 * 9 + 2) + 9 * 8 + 2) + 8
(6 * 3 + (9 * 9 + 2 * 9)) * (3 * 6 + 5 + 7 * 7) + 8 * 3
4 + 3
(7 + (9 * 2 + 7 + 7 * 5) * 4 * 8) + (3 + 4 + (7 + 8 + 6 * 2 + 9 + 3)) + 6 + (5 + 6 + 7 * 6 + 8 + 5) * (8 + (7 + 9 * 6 * 7 + 8) + (4 + 9 * 9 + 2 * 6))
5 + (9 + 4 * (4 + 6) * 4 + 5 * 8) * 2 + 4 + (7 + 2 + 4 * 4 + (8 * 6 + 4 + 4) * 6)
(6 * (7 + 5 * 9 * 5 * 6 * 4)) + (9 + 3 * 5) + 3 + 4 + 8 + 8
2 * (7 * 6 * 7 * 7) * 2 * 5 + 2
5 + 5 * 2 + (8 + (9 + 2 + 2 + 3 + 5 * 4) + 7 * 3 * 4 + (8 + 5 * 6 + 5 * 6 * 3))
9 + 6
(9 * 3 * 7 + 5 + 7 * 4) + 2 * 4 + 5 * 8 * (5 + 6 * (3 + 8 + 4 + 4 * 7) * 9 * 2 + 8)
(9 * 7 + (3 + 4 + 8 + 7 * 7)) + 3 + 9
5 * 4 * 4 + (7 + 7 * (6 * 8 * 7) + 5)
(9 * 5) + (7 + 4) + (4 * (3 + 8 * 4 * 7 * 6) * 8) + (4 + 2 * (6 + 3) + 2) + 8
(2 + 3) * (9 * 9 * 9 + 4 * (6 * 4 + 4 * 3)) * 7 * 8
7 + 3 + 5 + (3 + 3 + 8 + (6 * 3 + 9 + 5) * (5 * 7 * 8 + 5) + (3 + 4 * 8 * 8 * 8 + 3)) * ((3 * 9) + 3)
(6 * (3 * 2) * (8 + 3 + 2 * 3 + 6) + 9 + 7) + (5 * (8 * 7) + 2 * 4) * 6 + ((3 + 4) + 8 * (9 + 6 * 4 + 5)) * 5
3 + ((5 * 3 * 6 * 3 + 2 * 7) * 7) + 2 * 4
(7 * 5) * (3 * 3)
8 + 3 * 3 * (6 + (6 + 9 * 9) + 8 + 7) * 2
5 * (8 + 3) + 5 + (4 + (7 * 7) + 7 + 5) * ((6 + 5 + 3 + 9 + 5) + 8 + 3 + 4) * 9
7 + (4 * 6 * (4 + 8 + 9 * 2 * 3 + 4) * (5 + 9 * 8 * 7 * 9) + (5 * 3 * 9 * 2 * 9) * 2) * 2 * 6
8 * (5 * 5 * (2 * 5 * 2 + 4 * 6) + (7 + 8) + 5 + 8) + 9
5 * 4 * (7 + 4 + 9 + (5 * 2 + 9) + 7 * 3)
9 * (8 + (5 + 6 + 2) * (6 * 7 * 9) + 8 * 5) * (3 * 8) + 7 + 8
6 + 4 + 6 * 4 * 6
((2 + 5 + 8) * (7 + 2 * 8 + 8 + 4 * 3) + 4 * 9) * 5 * ((6 + 2 + 9 + 2 * 9) * 5 * 6 * 3 * 6 + 8) * 6 + 5
5 * 5 * 7 * (6 * 6) * (5 * (8 * 4 * 2 * 9 * 2))
3 + 6 + 9 * 6 * (6 + 5 + 8) + (3 * 5 + 6 * 2 + 6)
((7 + 3 + 9 * 4 + 7 * 7) * 2 * 5 * 9 * 7) * 9 * ((5 * 7 + 8) + 8 * (4 + 4 * 6 * 7 * 6))
(7 + 6 + (8 + 3) + 5 + 8 * 2) * 3
4 * (8 + 4 * 2 + 3 * 7) + (7 + (5 + 3 * 9 * 4) * 5 + 2) + 6
8 * 5 * 3 * 3
8 + 6 + (9 + 6 + 6 + 2 * 8 * 8) + 8 * (5 * 3) + 4
4 * ((3 + 9) + 4 + 3 * (7 * 3 + 3) + 3 + 3) * 9 * (7 + 4) * 4 * 8
(8 + 3 + 8 + 3) + (3 * 8 * 7 + 7 * 3 + 9) + 5 + 6
(9 * 7) + 3 * 4 + 9 * 7 + (9 * 9 * 3 * 7)
3 + 2 + 4 + 4 * 3 * (6 + 2 * 2 * (5 * 5 * 5 * 8 * 9) + 5)
5 + (5 + 3 + (6 * 9 * 9 + 2 + 2 + 4)) + 8 * (9 * 3 * (7 + 2 * 5 * 7 + 8 * 3) * (7 * 8) * (7 * 7 * 5 + 2 + 4)) * 9 + 2
7 + 2 * 3 + 5 + (7 * 6) + 2
7 + 3 * 9 + 8 * 4 + (5 * 5 * 5 + 8 * 5)
7 * 7 * ((9 + 3) * 8 + 5 * 5 + (4 * 5 * 5 + 6 + 4 + 9)) * 2 + 2 + 8
(2 + 3 + (2 + 6) + 7 + 7 * 8) * 9 + (6 + 5)
9 + (5 + 4) * 2
6 * 6 * 6 * (4 + 7) * (8 * 8 + 7 + 5 + 6) * 6
2 * 6 + (2 + 4 * 4 + 3) * 5 + 8
((7 + 8 * 7) * 7 * 6 + (6 * 7 * 9 + 5 * 6 + 7) + (4 * 3 * 2 * 7 * 4 + 5)) + (6 + (6 + 3)) + 8
7 + (7 * 9 * 3 + 6 + 5) + 5 * 2 + 2 + 9
3 + 3 * (5 * 4 * 7 * 8) + (8 * 9 + 2 * 6) + 5 * 7
(2 + (6 + 9 + 6) + (4 * 6 * 7 * 7 * 3) + 8 + (8 + 3 + 9) * 7) * (8 + 3 * 9 + 7 * 8) * 5 * 9 + 3
((2 * 4 + 8 + 6 * 5 + 7) + 7 * 5 + (4 + 5 + 5 * 4) + 2 + 7) * 4 * 7 * 7
5 * ((3 + 5 * 2 * 8 * 3 + 6) + 8) * 2
4 + 2 + 4 + (5 + 2 * 7 + 7 * (9 * 3 + 4) + 4)
7 + (5 + (4 + 8) + (3 * 5 + 6 * 7 * 3 * 4) + 7)
(4 + 7 * 7 * 9 + (6 + 2 * 3 + 3 * 8 * 3)) + 9 + (5 + 4 * 7 + 5 + (5 * 5 + 9 + 3 * 3)) + 6
6 + 5 * 4
((5 * 8 + 9 * 7) * 8 * 5 * 8 + 3 * 5) + 5 + ((7 * 3 * 7 + 4 * 4) + 4 + (6 * 3 * 8 * 5 + 5) * 2 + 7)
7 + 3 * 9 * 3 + 8 * (4 * 3 * 5 + 7)
7 * 3
(4 + 9) * 4 * ((4 * 9 + 7 * 6) * 7 + 6) + 3
(8 * 9 + 8) * 3 + 2
7 + (2 * 8 + 8 * 5 * 2 * 8)
(2 * (7 * 3 + 3 + 2 + 7 + 6) * 6 * 4 + 2 * 5) * 6
6 + 8 * (4 + 5 + 6 * 3) * 6
3 * 8 * 6 * (8 + 6 * 7 + 7) * 2 + 6
4 * 9 + 4 * (7 + 5 + 4 * 8 * (9 * 4)) + (2 + 8 + 3 + 9 + 7 + 6)
(2 + 3 * 9 * (9 + 5 + 2 * 2 * 6 * 2) + 3 * 3) * 6
9 + (6 + 3 + 9 * 3) + (9 + 8 * 8 + 8 * 7 * (8 * 2 * 4 + 2))
2 + (8 + (7 + 2) + 7 + 8 * 8) + 9 + (4 * 3 * 8 + 3 * (5 + 9 + 3)) * ((4 * 5 + 2 * 3 * 4) + 9 * 3) * 3
3 + 6 * (6 + (9 + 3 + 6 + 5 * 9 * 7) + 9 + 4 + 3)
5 + 8 + 5 * (2 + (2 * 3 * 2 + 7 + 2) * 6 + 7)
4 + (8 * 2 + 2 + (8 + 5 * 5 * 4 + 4 + 2) + 7 + (7 + 5 * 5 + 6 + 8 + 4)) * 3 * 4 + (9 * 8 + 3 * 6 + (7 * 7 * 4 + 9 * 2 + 8) + 8) * 6
(4 * 9 * 3 * 3) + (8 * 8 * 3 + 6 * 9) * 8
7 * 6 + (8 * 8 + 9 + 8 * 9 + 7) + ((8 + 5 * 5) + 3 + (6 + 6 * 5 * 8 * 4 + 5) * (9 + 2 + 6 + 9 + 6) + (5 * 2 + 5 * 4 * 9) * 9) + 3
5 * 8 + 4 * 7 + 5 * ((3 + 7 * 3 + 7) + 2 + 7)
5 * ((8 * 9 * 5 + 8 * 4 * 4) * 7 + (3 * 7 * 9) * (8 + 8 + 2 * 4 + 4))
8 + 6 * 9 * (2 + 3) + (4 * (2 * 3 * 8)) * 2
(5 * 2 * 6 + 7) + (7 + 2 * (5 + 3 * 5 * 7 * 8 + 3) + 4 + 3) * 7
9 + 9 + 3 * (9 + 7 * 2) + 6
5 * 4 + 7 * (7 + 8 + 4) + 4 * 9
5 * 7 + 2 + 7 + (4 + 7 * 4 * 6)
((4 + 3 + 2 + 4 * 5 + 8) + (5 + 8) + (3 * 6 + 2 + 7 + 7) * 8) + 2 + 8
4 * 8 + 8 + (5 * 5 + 2 + 4) + (9 + 3 + 9 + 6 * 9) + 7
4 + (4 * 7 * 2 * 7) * 6 * 2
7 * (4 + 2 + 7) * (2 + 4 * (4 * 4 + 8 * 3) * 2 * 7) + (3 + 8) * 4
5 + 2 + 2 * 5 * (3 + (8 + 7 + 5) + 4 * (2 + 3) * 7) * 8
6 + 4 + (2 + 8 * (4 + 6) + 5 * 5) + 6 + (6 + 2 + 2 * 3 + 4) + 7
(7 * 6 * 6) * (9 + (5 * 4 * 3 + 5 + 8)) * 2 * 2 + 6
((5 + 8) + 5) + 8 + 6 * 8
4 * (4 * (6 + 5) + 8 + 5 + (2 + 7 + 2 * 4 * 7))
(8 * 7) + 8
7 + ((2 * 6 * 3) + 8 + (7 * 4) * (7 * 2 + 6 + 9 + 8) * 2) + 7
((7 * 8 * 3 + 8 + 4) + 4 * (5 + 9 * 4 + 3 * 8) + (7 * 8) * (5 * 7 + 9 + 5)) + 2 * 3 + 2 * 6 + 7
9 * ((3 * 2 + 8 + 5) * 9 + 5)
6 * 9 + 3 * 7 + 8
6 * 8 + 9 * 9 * 4 * ((9 * 9 * 2 + 5) + 7)
(8 * 9 + 8 * (4 + 4 + 3 * 6 + 4 * 7)) * 3 + 7 + (5 + (5 + 4 + 6 + 2 + 2) + 5)
7 * 7 * 2
5 * (9 * 4 * 5 * (4 + 2 + 3 * 2 + 3 * 8) * 3) * 3 * 4 * ((9 + 2) + 7 * (5 + 4) * 4 * 4 + 7)
((2 + 3 + 2 * 6) * (8 * 2 + 3 * 2 + 6 * 6) * 9 + 2 + (4 * 2 * 3) * 4) * 4 + 6
4 * 5 * 5 * 2 * 9 + 6
3 * 4 * (3 + (3 * 7 * 2 + 9) * 7 + 3 * 6 * 4) * 5
6 + (6 + 3 + 3 * 5) + 9
9 * 2 * 2 + (5 + 7 * 9) * 8 + (6 + 6)
3 * 3 + 6 * 5
(4 + 7 + 5) + 6 + 2 + 9 * 6 * ((2 * 2 * 7 + 9) * 6)
2 * 4 + 3 + 4 + 8 * (5 * 3)
7 + 6 * 9 * 8 + (5 + 2 + (2 + 7 * 6 * 9 + 4 * 5))
7 * 3 * ((2 * 9 + 5 + 5) + 7 + 5 + (6 * 2 + 5 + 3 * 6))
4 + 9 + (4 + (7 * 7 * 5) + 3)
(8 + 6 + 5 * 9 * 9 + 6) + 6 + 5 + 5 + 4
(3 + 8 + 4 + 2) + 6 * 5 + 4 * (7 * 5 * 6) * 8
7 * (6 + (4 * 5 + 8 * 9 + 3) + 7 * 6 * 8) * 9 + 7
3 + (2 + 9 + 3 + 6 + 2) * 3 * (6 * 5 + (2 * 6 + 5 + 6 * 3) + 4)
(7 + 6 + (2 + 8 + 5 * 5 * 3 * 8) * 3 + (7 * 4 + 5) * 7) * 3 + ((4 + 3) * 2 + (8 * 2 + 3 * 2)) + 8
(9 + 3 * 6 + (7 + 3 * 8 + 7) * (5 * 5 * 6 + 8 * 6 * 8) + 2) + 6 + 9
((7 * 4) + 5 + 6) * (6 * 6 * 2) * (3 + (6 + 5 * 6 * 5 * 6) + 4)
9 * (8 * 2 + 9) * (7 + 7 + (9 * 9 + 3 * 8 * 2 + 7))
(6 + 5 + 9 + (3 + 2 + 9 + 5 * 4 * 7)) * 5 + ((4 + 4 + 7) + 6) + 7 + 3 + (3 + 3 * 5)
(4 * 5 * 3) * 8 * 6 + ((7 + 9 + 5 + 5 + 3) * (9 * 2 * 9 * 4 + 9 + 4) * (3 + 6 + 3 + 7 * 9 + 5)) + ((4 + 6 + 8) * 9 + 3 + 6 + 8)
4 + ((9 + 2 + 3 + 6 * 4 + 9) + 3 + 7) + 5 + 8 + (8 + 5 + 8)
(7 + 2) * 4 * 5
6 * 2 * (8 + 4 + 6 * 3 + (4 * 4 + 8 * 7 * 6 * 2) + 6) * 9 * 8
2 * 2 * (8 * 9 + 4 * 9 + (5 + 4 + 5) + 3) * (8 + 7) + 8
6 + 4 * 9 * 3 * ((8 + 9 * 7) * 5) * ((7 + 7 * 4 + 7) * (9 * 6 * 9 * 4) + (5 * 7) * (8 * 5 + 4) * 6)
3 * (5 * 9 * 7 + (4 * 6 * 6 + 8 + 8 * 8) * 8 * (2 * 8 + 5)) + 7 + 8 * 6 + 9
6 + ((2 + 3 + 7 + 9) * 5 * 2 + 5 * 9) + 8 * 8 * 8
5 + 6 * 5 + 4 + 5 * (4 * (3 + 4 + 3 * 7 * 9 + 5) * (9 + 8 + 2 + 7))
8 * 7 * 4 + 2 * 7 * (9 * 5 + 6 * 8 + 7 + 6)
((3 + 8 * 2 + 5 * 9 * 5) * (7 + 6 * 6 * 7 * 7 + 6)) * 4
(2 + (5 * 5 + 5) * (5 * 3 * 7 + 5) * 4 + 2 * 9) * 3 + 9 * 3 + 4 + 7
4 * 5 * (3 * 4 + 7 + (3 + 9 * 5 + 6 + 3 + 6)) + (3 + 9 + (7 + 6 * 7 + 6) + 4) + 7
5 * ((5 * 4 + 8 + 7) * 7 * 3 + 6 * (8 + 2)) + 3 * (5 * 7)
8 * 2 * (6 + 5 + 5) + (9 * 4 * (7 + 9) * 4 + 6 + 3) + (7 * 6 + (5 * 5 * 5 + 6 + 3 + 5) * 5 + 3) + 4
(6 * 7 * 8 * (2 * 9) + 9 + 2) + 2 * 7 + 5
3 * 3 + 5 + 6
8 * (3 * 3) + 8 * (9 * 6 * (6 + 9 * 4 * 9 + 6))
3 * 3 + (9 + 6) + 2 + 6
8 + 8 + 2 + 2 * 6 * 7
4 * (6 + 7) * (2 * 8 + 6 + 6) * 2 * 2 * 7
5 * 5 * 6 + 3 * (7 * 5 + 6 * 6) * 9
3 + 6 + 9 * (8 * 3 * 6 * 6 * (7 + 2 * 9 * 8 + 2 + 2))
7 * 5 + (7 * 4 + 4 * 3 + (7 + 6))
8 + (8 * 8 * 2) * 6 + 4 * (6 + (2 * 6 + 2 + 8) * 3 * 3)
3 + 7 + (2 + 2 + 3 * (2 * 5 * 7 + 9 + 2) + 7 + 5)
3 + (2 + (5 + 5 + 3 * 2)) + 2
9 + 8 + 7 + 3 + (8 + 5 + 3 + 3 * 6) * 3
4 * 9 + 4 + 7 + 6
9 + 7 * 8 * 2 * 6 + (5 * 2 + 9 + (7 + 7 + 9 + 9))
(3 + (5 * 9) * (8 * 9 * 3 + 4 + 2 + 5)) + 5 * (7 * 4) + 3 + ((9 + 3) * 5 * (7 + 4) + 6)
6 + 8 + 9
((2 + 9 + 9) + 2 * 9 * 9) + 8 + 3 + ((6 + 2 + 4 * 8 + 7 * 2) + 5)
(3 + 9 + 2 * 8 + 5 + 3) * 8
8 + (6 * (2 + 4 * 5 + 6 + 7) * 6 * 7) * 8 + 8 + 9
((8 * 9 + 6 * 3 + 6 * 7) * 6 * 4 + 6) * ((5 + 2 + 9 + 6 + 2 * 5) * (3 + 8 * 7) + 5 * 8) + 8 + 3 * 8
4 + 7 * (6 + 3) + 5
(4 + (2 + 4 * 3 * 4) * (5 + 7 * 2 + 7 * 8)) * 3
(2 + 7 + (7 * 4 + 8 * 3)) * 4 + 4 + 6 + (5 * 4 * 4 + 3)
(2 + 4) + (5 * 8 + 2 + (4 + 4 + 2 * 9 + 5 + 7) * (4 + 6 + 6)) + 3 * 3 + 8 * 8
6 + 7 * 4 * 9 + 3
7 + 9 + ((2 + 2) * 3 + 9) * 8
9 * 2 * 8 * (3 * 7 * 4 + 5 * 4)
5 * 3
4 * 5 + 4 * (7 * 3 * 7 * (8 * 5) * 9) * 5
9 * (4 + 8) * 9 + 3 * (5 + 7)
6 + ((9 * 8) + 3 * 8 + (3 + 4 * 9 + 8 * 6 * 4)) + 6 * 9 * 5 * 3
((6 * 9 * 8 * 6 + 7 * 6) * 8 * 6) * (3 * (8 * 6 + 3 + 7 * 4 * 9) * 4 * 3) + 5
(7 + 3) + 9 * (3 * 9) * (5 * 3 + 2 + 2 + 4) * 6 + 7
(2 + (4 + 4)) * (6 + 7) * 5 * 9 + 3
3 + (4 + 6) + 3 * 8 * (4 * 5 + 6 * 5) + (5 + 2 + 6 + 7 * 5)
((5 * 6 + 9) * 2 * (8 * 5 + 5 * 5 + 7) * 9 * 2 + 6) + 2 * 9 * (2 + 4 * 5 + 6 + 6)
6 * 9 + 9 + 5 * ((3 + 6 * 3 * 9 + 9) * 2 * (7 + 6 + 9 * 8) * (5 * 8) + 9 * 2)
(9 + 3 + 8) + 7 * 5 * (4 + (3 + 4 * 2 + 5 + 9) * 2 + 9 + 8) * 8
(5 * 4 + 4 + 8 + (2 * 2 + 5 + 3 * 7) * 3) * (7 * 5 + 4 + 4 * 5 * 2) + 9 * (3 * (3 + 7 * 3) * 9 * 5 + 7) * 9 + 8
(4 * 9 + 5 + 5 * 4 * (4 + 7 * 3 + 3 * 3 * 6)) * 3 * 9 * 3
5 + 9 + (5 + 8) + (4 * 7 * 3 + 6)
2 + 4 + ((5 + 7) * 3 * 5) * (5 * 7 + (7 * 9 * 9 + 7 + 5) * 4) + 4
(3 + 6 * 4) + 2
(2 + 9) + (9 + 7 + 4 * 4) + 5 + 8
7 * 7 + ((2 + 6 + 5) * 2 + (9 * 9 * 7 * 5) + 7 + 7) * 3
((4 + 5 * 8) + 6 * 6 + 5 + (5 + 6)) * 8 * 2 + 5 * 4 * 7
3 * ((2 * 5 * 7 * 7 + 2) + 7 + (8 + 7 + 2 + 2 * 4) + 6) * 8 * (9 * (9 * 9) + 6 * 6 * 5 + 7) + 4
9 * ((8 * 3 * 6 + 8 + 5) * 8 * 6 + 4 + 8 + 8) + 6 * ((6 * 9 * 4 + 4 * 8) * (2 + 6 * 3 + 6 + 4 * 9))
(4 * (5 + 5 + 4 * 8 + 3)) * 5 * (7 * 3 * 2) * 2
2 * 9 + 8 * ((9 * 4 * 7 + 4 + 6 + 8) + 6 * 3 * 7 * 5 + 2) * 7
3 * (4 + 9 * 8 * (3 + 3 + 3 + 3 + 5) * 4) + 6
9 + 9 * 5 * 9 + ((7 * 8 * 8 * 8) + 5 + 3)
((6 + 4 * 2 * 7) * 3 * (5 * 9 * 5 * 2 * 3 * 6) * 7 * (6 + 8)) * (2 + 3 * 3 * (5 + 4 + 2)) + 8 * 9 * 9
8 + 9 + 5 + 6
(5 + (2 * 9 + 8 * 4 + 5 * 2) + 5) + 3 * 9 * 2 + (9 * 4 * 8)
6 + (8 + 5 * 6 * 5 + (2 * 6))
2 * ((5 + 4 + 6 + 7 + 4 + 2) * 6 * 4) + 2 + 3 + 8 + 6
((3 * 8 + 8 * 5 * 4) * (5 * 9 + 3) * (2 * 6 + 4 + 3) + 3 + (4 * 9 + 9)) * 7 + ((9 + 5 + 5) + 3 + 9 + 5) + 8
5 * 5 * 7 + 2 + 4 + 6
2 * 4 + (2 + 7 * 3 + 9 + 5) + (8 + 8 * 4) * 7
(8 + (2 + 8) * 9 * 8 * 4) + 8 * 8 * 6
8 * (3 + 4 * 4 * (2 + 7 * 2 + 5 * 8)) * 3
((2 * 8 + 3) + 3 * 4 + (3 * 9 + 5 * 6 * 6 + 3) * (5 + 3 * 4 + 6 + 3 * 5) + 3) * 6 + 6 + 8 * 2
4 + 6 + ((9 * 5 + 2 * 8) + 2 * 3) + (2 * 7 * (3 * 2 * 4 * 2) + 6 * (6 + 8 * 8 * 8 + 5 * 9))
3 + 6 + ((5 * 7 * 9 * 2 * 9 * 3) + 3 + (3 * 4 + 3 + 7 * 8) * (3 + 4))
(9 + (4 + 8 * 3 + 7 * 6 * 9)) * 4
5 + (7 * 2 * 4 + 8) * 9 * ((9 + 8 * 8 * 7 + 5) * 6 * (3 + 7 + 8 * 3 + 7))
(4 * 5 * (9 * 8)) * 9 * 8 * (4 + 8 * 9 + 9 + 6) * 6 + 7
(4 * 3 * 8 * 2 * 7) * 4
2 + (5 + 5 + (9 * 4 + 8 + 9 + 8) * 4 + 3) + 9 + 6 * 7 + 5
(7 * 4) * 7 * (5 * 9 + 5 + 6 + 6) * 3 * 9 * 9
7 + (6 + 7 * 2 * 7 * (5 * 7 + 2 + 6 * 6)) * 8
2 * 3 + (3 * 2 * 7 * (7 * 7 + 9 * 7 + 6)) + 3 + 9
((3 * 9 + 6 * 6 + 9) + 2 * 5 + (9 + 8 + 6 * 6 + 6) * 7) * (6 + 2 + 5) + (4 * 5 + 6) * ((6 * 8 + 8 + 3) * 7 * 7 * 6 + 4) * 3 * 6
3 + (9 + 7 + 2 * 7 + 5)
2 * 6 + 2 + (9 * 9) * 9 * 4
((3 + 8 * 3 * 9 + 6) * 5) * 6 * 3 + 6 * 5 + 6
5 + (7 + 8)
6 * 4 + (5 * 5) * ((4 * 3 + 9 + 6 + 3) + 2 * 3 + 4) + 9 * (6 * 7 * 4 + 5)
4 + (6 + (9 * 5 * 7 + 7 + 9) + 7) + 7 + 6 + 3
3 * 4 + (2 + (4 + 8 * 5 * 9 * 7)) + 4 * 6
3 + 7 * 3 * (2 + 9 * 2 + 5) * 5
2 * 2 + (4 + (5 * 5)) * 3
((3 + 6 * 7 + 6) + 6 + 9 + (7 * 7 + 6) + 9 * 6) + (3 * 5) + 8 + 8
9 * (3 + 4 * 8) * 5 + ((8 * 7 * 5 + 2 * 6 + 7) + 4 * 8 * 5 + 5) * 8
((5 * 9) + 6 + 6) + 5
(2 * 3) + (8 * (8 * 3 + 7 * 6 + 3) + (7 * 7 + 6 + 6 * 8 * 7) + (3 + 8 * 4) * 6) * 9
5 * 3 * (5 + 8 * 3 + 8 + 8 + 2) + (7 + 7 * 8)
2 * 4 * ((9 + 8 * 9 * 6) * 4 * (5 + 7 + 5 * 3) * 7 * 2 + (8 * 7 * 3 * 5))
8 + 6 + 9 * (9 + 9 + (7 + 2 + 3 + 3 + 6)) * (3 + (4 + 9 * 2 * 3)) + 4
(4 + 7 + 5 * 8) * 3 * 3 + 6 * 3
(9 * 8 * 6 + 9) * 5 * (3 * (8 + 5 * 9 * 4 + 2 * 2) + 6 * (5 + 7) * 9 + 6) + 6 + 4
7 * 2 * (8 + 5 * 9 * 6 + 9 + (6 + 8)) * 6 + 3
2 * 4 * (3 * 8 + 9)
7 + ((3 * 4 * 3 + 6 + 2) * 7 * (4 * 4 + 2)) * 7 * 4 + 3 + 3
6 * (5 * 8 * 2 * 4 * 3 * 4) + 4 * 2 + 9 + (7 + 8 * 2 * 3 + (5 * 7 + 6 + 5) + (5 + 8))
(3 * 4 * 7 + 5 + 7) + 6 + ((4 * 7 * 8 * 9 + 4) + 4 * 8) * 6 * 7
9 * (7 + 5 * 5 * 9) + (4 + (2 * 9 * 8) + 2 * 5)
6 * 7 * 4 + (4 + 9 * (4 + 2 + 4 * 6) * 5) * 3 + ((3 * 3 * 6 * 5 * 9) + 4 * 2)
9 * (5 * 3 * 8 + 8 * 4 * 5) + 2 + (2 * 8 + (6 * 3 + 7 + 9) + 5 + 3) * 8
3 * 4 * 4 + 9 * 4 + (9 + 5 + 8 * (5 + 3 + 5) * (8 * 6 * 2) + 2)
5 * 5 + 2 * 2
5 + 3 * (7 * (2 + 2 + 6 * 3 * 5 + 5) + 9 * 3 * (6 * 3 + 6 * 4)) + 3
(2 + (2 * 6 + 7 * 6) + (6 + 4 + 7 * 9 * 4 * 8) + 3) + 9 + 5 + 3 * 2
7 + ((2 + 2 + 8 + 3 * 6) + 2)
3 * 9 + (5 + 7 + 3 + 9 + 6) * 8
2 * ((7 * 9 * 3) * 7 * 6) * 8 * 3
9 * 7 + 7 + 6 + 3 * ((9 + 3 + 6 + 3 * 4 * 2) + 4 * (3 * 2) * (6 + 6 * 2 * 4 * 8 + 7) + 2 * 6)
((8 + 9 + 8 + 3 * 4) * 9 * (3 * 6 + 5) * 6 + (2 * 3 * 4 + 9)) + 5 + 2 + (4 + (7 * 8 + 4 + 4 * 7 + 8)) * 5 + 4
4 + 3 + 6 + 9 + (7 * 9 * 6 * (5 + 8 * 3 + 3) * 4 + 3)
2 * (9 + 9) * 9 * 9
5 * ((2 + 7 + 7 + 5 + 9) * 4) + 7
(6 + 6 * 9 + 3) + (4 + 9 * 2 + 9 * 2 * 9) + 7
(6 * 6) * 7 + 9 * 2 * 2 * (4 + (8 + 7 + 9 + 7 + 4 * 2) + 6 * 4 + 8 * 5)
((9 * 7 * 9) + 6 + 4) * (6 * (3 + 5) + 6 * 5) + 6 + 3 * 2
6 * 6 + (8 + 3 * 6 + 2 + 8 + 8)
6 * 8 + ((9 + 3 + 7 * 2) + 8) + 3 + 7
4 + (7 + (3 + 5) + 6) * (8 * 3 + 5 + 9 * 8)
7 * (7 * 6 + (3 + 7 * 9 * 7 * 8) * 4 + 5 * 3) + 4 * 2 + 6 + (8 + 6 + 8 * (4 * 3))
9 * 9 * 6 * ((6 + 9 + 7) * 5 + 9 + (9 + 4 * 7)) * 6
(3 + 9) + ((9 + 3 + 9 + 9) * 6 + (2 * 6 + 8 * 2 + 2)) + 3 * 3 * 9 + 3
(2 * (9 * 9 + 9) * 9 + 9) * 2 + 2
5 * 2 * 9 + (9 * 8 * 2 * (6 * 7 * 8 * 5)) + (5 + 8 * (9 * 6 + 7 * 7 * 7) * 3) * 2
6 * 2 + ((4 + 6 * 3 + 9 + 9) + 9 + 2 * 7 * 8)
(2 * 8 * 5 * 2 + 5) * 8 + 7 * 5 * ((5 + 8 * 9 * 4 * 2) * (9 + 9 + 5 + 7) + (8 + 6 + 3 * 8 + 7) * 3)
4 + 6 * (7 + (6 * 5) * (5 * 2 * 9 + 4) + 2) * 9
4 + 8 * (6 * 3 * 7 + (8 * 9 + 9 * 2)) * 5
(2 + 9) * (8 * 4 * 5) * 9
(4 + 6 + 5 * 7 + (5 * 4 + 2 * 2 + 9 + 2)) + 4 + 8 * 3 + 3
7 + (5 * 5 * (2 * 2 * 8) * 7 * 8) * 4 * 6 + ((5 + 3 * 7 + 4 * 7 * 8) + 2 * 6 * 9 + 8)
5 + 3 * 7 + (6 + 4 * 9 + 3)
3 * (2 + 6 + (3 * 7 * 2 + 9 * 9 * 8) + 9 * 4) + 6 * (4 * (5 + 2 + 2 * 3) * 5 + 9) + 5
7 * 6 + 2 * ((2 * 9 * 6 + 3 + 2) * 3 + (2 + 7 + 4) * 8)
2 + (3 + 9) * 7 + 6 * 7
2 * 5 * 9 * (2 + (5 * 8 * 4 * 4 + 8 + 7) + 3 * (5 + 4 * 8 + 5 * 9 + 7))
((4 + 5 + 7 + 4 * 3) + (9 + 7 + 5 + 7 + 5) + 8 * 9 + 7) * 6 + 4 * (6 + 3 + (6 + 7)) * 8
9 + 3 + (8 + 4 * (8 + 3) * 8 * 8) * (8 * 2 * 9) * 5
(8 * (3 + 2 * 7 + 2 + 6) + 9 + 2 * 9) + 3 * 5
6 + 6 * 2 * 8 * 5 + 4
(6 + (7 + 2 * 6 + 3) + (3 + 7 * 5 * 6 + 4 + 9) * 5 * 3) * 4 * (6 + 3 * 2 + 4 * (9 + 6))
2 * ((7 * 6 * 3 + 9 + 9 + 9) * 2 + 9 * 8)
9 * (3 * 6 + (9 * 9 + 7 * 9) + 8) + 8 + 6 + 4
4 + 4 * (4 * 8 + 4 * 2 * 2 + 3) * 3 + 6 + 9
9 * 9 * 2 + 4 * (2 * 7 * 5 * 2 + 3)
7 * 4 * 6 * (3 + 2) * 4
(6 + 3 + 8 * 6 + 8) + ((6 * 5 * 8 * 8) + 2 + 8 + 2 * 6) + 5 + (2 * (6 + 5 + 9 * 9 + 3) + 2 * 7) * 6 + ((2 * 8 * 2 * 9) + 9)
5 + 3 * ((2 * 7 + 9 * 2) * 3) * 6 * 6 + 8
(6 + 3 + (2 + 7 + 4) + 4) * 4 * 4 * (9 * 2 * 7 * (9 + 3 + 8 + 5) * 3) + 8
8 + ((9 * 4 * 4 * 3 + 9) * 3 + (9 + 6) * 3) * (9 + 9) + 6
(9 + (3 + 7 + 9 * 2 * 8) + 3 * 5 * 7 * 2) * 6 + 8 * 7 + (5 + 7 + 4 * 5 * 4)
8 * 2 + ((5 + 9) + 2 + 8 + (8 * 2) * 3 + 8) * 9 + (2 + 8 * (8 + 4 + 7 * 9) * 4 + 7 + 6)
((8 * 8 + 7 * 7 + 3) * 8 * (4 + 8 * 4 + 4 + 4 + 4)) + 9 * 2 + 8
5 * (6 * 3 + 4 * 2 + 7 * 5) * (3 * 7 * 8 * 3 + 3 + 6) + 6 + 4 + ((4 * 6 + 3 * 8 + 4 + 5) + (3 * 5 + 8) + 6)
6 + (9 * (5 * 2 + 9 + 6 * 2 + 2) + (4 + 3 + 6 + 5) * 2 + 5)
4 + ((3 + 2 * 6 * 3) * 5 + 8 * (5 * 7 * 4 + 7 * 6 + 6) + 3 + 7) + 9 + 8 * 5
7 * (5 * 5 + 5 * (7 + 6 + 6 + 5 + 2 + 6) + 6) + 7 * 8
9 * ((2 + 9) * 5 * 7 * 4) + 9 + 7 * 5
(8 + 9 + (7 * 7 * 5 + 6) * 4 + (5 * 5 * 4) + 5) * 6 + 8 * 6 * 9 * 9
4 * ((5 * 4) + 7) + 2
2 + (3 * 5 + 7)
3 + 8 * 5 + 2 * (8 + 4 + 8 * 2 + (8 * 4 * 9 * 3 + 6) * 4) * 5
8 + 2 * 6 * 5 + 8 * (2 + 9 * 7)
(5 + 4 * 5 * 5 * 5) * 6 + ((9 + 9) * 7 + 6 + 7) + 5 * 8 * 7
4 + (4 * (9 + 3 + 8) + 4 + (9 * 6 * 2) + 8) * 2
(4 * 6 + 5 * 8 * 9 * 7) * 8 * 7 * ((8 + 6 * 7 + 4 * 9 * 3) + 7)
9 + 5 * 2 * ((7 * 9) + 4 * 4)
5 * 5 * (4 * 8 + (5 + 8) + 9 * 6 * 5)
7 + (7 * 2) + (4 + 7 * 5 * 5 * 4)
6 + 4 + 2 + 8 * (6 + 3 * 7 * (5 * 2 * 2 + 5)) + (7 * 9 * 4 + (2 + 5 + 3 + 5) + 9 * 9)
(4 * 2 + 9 * 7 * 3) * (5 * 4 * 2 * 4 * (9 + 4)) * 2
((4 + 6 + 5) * 2) + 8 * (7 + 9 + 3 * 8) * 3 * 4
4 * (9 + 4 * 8) + 2 * 4 + 9
4 + (4 + 5) + 5 * 3 + 9 * 8
8 + 8 * (6 + 9 + 7) + (4 * (2 + 5) + 2 * (6 + 5 + 6 * 8 + 3 * 3) + 2) + 7 * (9 + 2 + 2 * (2 * 7) * 2)
((9 * 8 * 7) * 3 * (5 + 6 * 7 + 4) + 9 + 7 + 4) * 9 * (7 * 3 * 8 * 7 * 4) * 7 * 2
(2 * 5 * (8 + 2) + (2 * 3 * 7 + 6 + 9) + 6 * 3) + 5 * 2 * 5
3 * 4 + (9 * 6 + 2 + 6 + 7 * 2) + 5 + 6
3 + ((4 * 6 + 4) * 4 * (9 * 3 + 5 + 7 * 3) + 3) * 6 * 9 + 9
5 * 4 + ((7 + 9 + 6 + 9 * 7) + 7)
((3 + 9 * 2 + 7 * 8) * 4 + 3) + (9 + 9 + 5 * (3 * 5 + 7) + 8 + 9)
4 + (3 + 4 + 4 * 8 * 6 * 5) * (7 * 5 * 9 + 7 + 8)
(8 * (3 * 8 + 4 * 4 + 4)) + 7 * 9
(2 * 2 + 9) * 5 + (8 + 3 * 3 + 2) + 7
2 + 7
5 + (3 * 2 * 5 + 4) * (5 * 4 * 9 + 5) * 8 * 6 * 4
8 * 7 * 6 + (2 * 7 * (8 + 2 * 3 * 5) * 5) + 6
8 * 5 * (2 * 2 * 6) * 3 + 7 + 9
((4 + 4 + 9) * 5) * (6 * (6 + 3)) + 2 * (7 * 6 + 3)
(6 * (3 * 9 * 4) + 6 * 5 + 5 + 7) * (7 * 5) * 2 * 2 * (5 + 5) * 4
3 + 7 * (3 + 9)
(9 * 2 * (4 * 6)) + 9
((3 * 6 + 5 * 6 + 9 + 6) * 9 + 9) * 5 + 3 + 4
(8 + (5 * 7 * 2 + 2) + 9 * 6 * 9) * 4 + 4 * 9 + 8 * 5
8 + 5 + 7 + 8 + 7
9 + (9 * 7 * 9 * 2 + 9 + 9) + 7
3 + 4 + 8 + 5 * (3 + (3 + 7 + 3)) + 7
6 + (5 * (2 * 9 * 6) * 2 * 4 + 9)
5 + 7 + (8 * 5 * 4) * 7
6 + (3 * 7 * 9 + 6 * 2 + 3) + 2 * 6 * 2 + 5
(9 + 7 + 8 * 7 * 9) + (5 + 7 * 8 + 3) * 2 + 3 + (2 * 8 + 9 + (6 * 2)) + 2
(9 + 5) + 8 + (5 * 8 + 5 * 2 + 8) + 2
2 * (2 * 5) * (8 + 8 * (2 * 5 + 9 + 9) + 5 * 8 + 2) + 6 * 9
(6 * (4 * 5) + (4 * 5 + 3 * 7 * 2 + 4)) * 2 * 8 * 2
8 * 8 + (5 * (3 * 4 * 2 * 2) + 2) + 5
3 + 4 + 9 * 7 + 5 + 3
3 + 7 + (8 * 5 + 7 * 6)
9 + 5 * 8 + (6 * (2 + 9) * 7 + 7 + 8) + 6
9 * 4 * (5 * (6 * 6)) + 7 * (6 + 7 + 5 * 3 * 9 + 4)
5 + 9 * 7 * (6 + 2)
8 + (9 + 6 * 5 * (6 + 9) * 5) * (3 + 6 + 8)
2 + (7 * 4 * (9 * 4 * 5 * 2)) + (8 + 2) * 4 * (3 + 8)
(5 * 8 * (2 + 7 * 2) * (6 + 4 * 9 * 8 + 3 + 2) * 7) * 8
(8 * (5 * 2 + 5 * 4 + 4) + 8) * 4 * 4 * (6 + 6) + 7 + 9
(7 * 2 + 2 + 9 + 7) * ((6 + 5) * 3) + (2 * 4 + (8 * 7 * 9 * 7) + 5 + 6 * 9) + 3 + 4 + 2
5 + 7 + 4
4 + 8 * 6 * (9 + 4 * 6 + (9 * 8) + 5)
4 + 9 * 2
2 + (7 * 7 * 2 + 2 * 3 + (6 + 9 * 7 * 4)) + 5 * 4
(5 + 9 * 9) * 3 * 2 + 5 + 6
(3 * 6 + 5 + 8) * 9 + 9 * 7 * 3 + 7
((7 * 5 + 9 + 8 * 8) * 5 * 2 * 7) + (2 + 8 + 5) * 3)";
